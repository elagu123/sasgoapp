# Docker Compose for SASGOAPP Production Deployment
version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: sasgoapp-frontend
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx/conf.d
    volumes:
      - ./docker/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    networks:
      - sasgoapp-network
    restart: unless-stopped

  # Backend Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: sasgoapp-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN:-https://yourdomain.com}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
    volumes:
      - uploads-data:/app/uploads
      - ./logs/backend:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - sasgoapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sasgoapp-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-sasgoapp}
      - POSTGRES_USER=${POSTGRES_USER:-sasgouser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
      - ./logs/postgres:/var/log/postgresql
    ports:
      - "5432:5432"
    networks:
      - sasgoapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sasgouser} -d ${POSTGRES_DB:-sasgoapp}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sasgoapp-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - sasgoapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Database Backup Service
  db-backup:
    image: postgres:15-alpine
    container_name: sasgoapp-backup
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-sasgoapp}
      - POSTGRES_USER=${POSTGRES_USER:-sasgouser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
    volumes:
      - ./backups:/backups
      - ./docker/backup/backup-script.sh:/backup-script.sh:ro
    depends_on:
      - postgres
    networks:
      - sasgoapp-network
    restart: unless-stopped
    command: sh -c "echo '${BACKUP_SCHEDULE:-0 2 * * *} /backup-script.sh' | crontab - && crond -f"

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: sasgoapp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus:/etc/prometheus:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - sasgoapp-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for Visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: sasgoapp-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - sasgoapp-network
    restart: unless-stopped
    profiles:
      - monitoring

# Named volumes for persistent data
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  uploads-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Network for service communication
networks:
  sasgoapp-network:
    driver: bridge