// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  password    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  trips              Trip[]
  sharedTrips        SharedTrip[]
  gear               Gear[]
  invitationsSent    Invitation[] @relation("InvitationSender")

  @@map("users")
}

model Trip {
  id                     String    @id @default(cuid())
  title                  String
  destination            String
  startDate              DateTime
  endDate                DateTime
  budget                 Float?
  itinerary              String?
  privacy                String?   @default("private")
  itineraryCompletion    Int?      @default(0)
  packingProgress        String?
  imageUrl               String?
  selectedAccommodationId String?
  travelers              Int?      @default(1)
  pace                   String?
  interests              String?
  weather                String?
  version                Int       @default(1)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  // Relations
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  sharedWith   SharedTrip[]
  invitations  Invitation[]
  expenses     Expense[]
  reservations Reservation[]
  packingList  PackingList?

  @@map("trips")
}

model SharedTrip {
  id              String @id @default(cuid())
  permissionLevel String // 'VIEWER' | 'EDITOR'

  // Relations
  tripId String
  trip   Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tripId, userId])
  @@map("shared_trips")
}

model Invitation {
  id              String   @id @default(cuid())
  email           String
  permissionLevel String   // 'VIEWER' | 'EDITOR'
  status          String   @default("PENDING") // 'PENDING' | 'ACCEPTED' | 'REJECTED' | 'CANCELLED'
  invitedAt       DateTime @default(now())
  respondedAt     DateTime?

  // Relations
  tripId      String
  trip        Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)
  invitedById String
  invitedBy   User   @relation("InvitationSender", fields: [invitedById], references: [id], onDelete: Cascade)

  @@unique([tripId, email])
  @@map("invitations")
}

model Expense {
  id          String   @id @default(cuid())
  amount      Float
  description String
  category    String
  date        DateTime
  createdAt   DateTime @default(now())

  // Relations
  tripId String
  trip   Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("expenses")
}

model Reservation {
  id          String   @id @default(cuid())
  type        String
  title       String
  details     String
  date        DateTime
  createdAt   DateTime @default(now())

  // Relations
  tripId String
  trip   Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("reservations")
}

model PackingList {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tripId String @unique
  trip   Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)
  items  PackingListItem[]

  @@map("packing_lists")
}

model PackingListItem {
  id       String  @id @default(cuid())
  name     String
  category String
  qty      Int     @default(1)
  packed   Boolean @default(false)
  notes    String?
  order    Int     @default(0)

  // Relations
  packingListId String
  packingList   PackingList @relation(fields: [packingListId], references: [id], onDelete: Cascade)

  @@map("packing_list_items")
}

model Gear {
  id          String   @id @default(cuid())
  name        String
  category    String
  brand       String?
  model       String?
  weight      Float?
  description String?
  imageUrl    String?
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("gear")
}